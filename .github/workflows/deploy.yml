name: Deploy to Cloudflare

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Fetch Cloudflare Account ID
        id: fetch_account_id
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "Using provided CLOUDFLARE_ACCOUNT_ID."
            echo "account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          else
            ACCOUNT_ID=$(curl -sS -X GET "https://api.cloudflare.com/client/v4/accounts" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | jq -r ".result[0].id")
            if [[ -z "$ACCOUNT_ID" || "$ACCOUNT_ID" == "null" ]]; then
              echo "Failed to fetch CLOUDFLARE_ACCOUNT_ID. Check CLOUDFLARE_API_TOKEN."
              exit 1
            fi
            echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Ensure Worker Subdomain Exists (Workaround)
        run: |
          echo "Ensuring Worker subdomain is initialized..."
          curl -sS -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-init" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/javascript" \
            --data 'addEventListener("fetch", event => event.respondWith(new Response("OK")))'
          curl -sS -X DELETE \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-init" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Install dependencies
        run: |
          npm install
          cd worker
          npm install

      - name: Build worker
        run: |
          cd worker
          npx wrangler deploy src/index.ts --outdir dist --dry-run

      - name: Build page
        run: |
          npx @cloudflare/next-on-pages

      - name: Remove Durable Object Bindings Temporarily
        continue-on-error: true
        run: |
          echo "Removing Durable Object bindings temporarily for Terraform compatibility..."
          BINDINGS_RAW=$(curl -sS -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          echo "Bindings raw response: $BINDINGS_RAW"
          NEW_BINDINGS=$(echo "$BINDINGS_RAW" | jq -c '.result.bindings // [] | map(select(.type != "durable_object_namespace"))')
          echo "New bindings: $NEW_BINDINGS"
          curl -sS -X PATCH \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -F "settings={\"bindings\":$NEW_BINDINGS}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Deploy using Terraform
        run: |
          terraform init
          echo "Checking resources before import..."
          KV_ID=$(curl -sS "https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/storage/kv/namespaces?per_page=100" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | \
            jq -r '.result[] | select(.title=="uptimeflare_kv") | .id')
          if [ -n "$KV_ID" ]; then
            echo "Importing KV namespace..."
            terraform import cloudflare_workers_kv_namespace.uptimeflare_kv "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/$KV_ID" || echo "KV import failed, continuing."
          else
            echo "KV namespace not found, skipping import."
          fi
          WORKER_EXISTS=$(curl -sS -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.success')
          if [ "$WORKER_EXISTS" = "true" ]; then
            echo "Importing Worker script..."
            terraform import cloudflare_worker_script.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare_worker" || echo "Worker script import failed, continuing."
          else
            echo "Worker script not found, skipping import."
          fi
          PAGES_EXISTS=$(curl -sS -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/pages/projects/uptimeflare" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.success')
          if [ "$PAGES_EXISTS" = "true" ]; then
            echo "Importing Pages project..."
            terraform import cloudflare_pages_project.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare" || echo "Pages project import failed, continuing."
          else
            echo "Pages project not found, skipping import."
          fi
          echo "Skipping import of cloudflare_worker_cron_trigger (unsupported by provider)."
          terraform apply -auto-approve -input=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Re-add Durable Object Bindings
        run: |
          echo "Re-adding Durable Object bindings..."
          CURRENT_BINDINGS_RAW=$(curl -sS -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          echo "Current bindings raw response: $CURRENT_BINDINGS_RAW"
          CURRENT_BINDINGS=$(echo "$CURRENT_BINDINGS_RAW" | jq '.result.bindings // []')
          NEW_BINDINGS=$(jq -n --argjson current "$CURRENT_BINDINGS" '[{"type":"durable_object_namespace","name":"REMOTE_CHECKER_DO","class_name":"RemoteChecker"}] + $current')
          echo "New bindings to set: $NEW_BINDINGS"
          curl -sS -X PATCH \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -F "settings={\"bindings\":$NEW_BINDINGS}"
          curl -sS -X PATCH \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/script-settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"observability":{"enabled":true}}'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Upload Pages via Wrangler
        run: |
          npx wrangler pages deploy .vercel/output/static --project-name uptimeflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
