name: Deploy to Cloudflare

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      # Fetch Cloudflare Account ID
      - name: Fetch Account ID
        id: fetch_account_id
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "Using provided CLOUDFLARE_ACCOUNT_ID from secrets."
            echo "account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          else
            ACCOUNT_ID=$(curl -sS -X GET "https://api.cloudflare.com/client/v4/accounts" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | jq -r ".result[0].id")
            if [[ "$ACCOUNT_ID" == "null" || -z "$ACCOUNT_ID" ]]; then
              echo "Failed to fetch CLOUDFLARE_ACCOUNT_ID. Please check CLOUDFLARE_API_TOKEN."
              exit 1
            fi
            echo "account_id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      # Workaround to force Cloudflare allocate Worker subdomain
      - name: Create worker subdomain (temporary workaround)
        run: |
          curl -sS -X PUT \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-script" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/javascript" \
            --data 'addEventListener("fetch", event => event.respondWith(new Response("OK")) )'
          curl -sS -X DELETE \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/dummy-script" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Install packages
        run: |
          npm install
          cd worker
          npm install

      - name: Build worker
        run: |
          cd worker
          npx wrangler deploy src/index.ts --outdir dist --dry-run

      - name: Build page
        run: |
          npx @cloudflare/next-on-pages

      # Remove durable object bindings before Terraform
      - name: Remove durable object bindings (temporary workaround)
        continue-on-error: true
        run: |
          NEW_BINDINGS=$(curl -sS -X GET \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq '.result.bindings | map(select(.type != "durable_object_namespace"))' -c)
          echo "Updating bindings without durable objects."
          curl -sS -X PATCH \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -F "settings={\"bindings\":$NEW_BINDINGS}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Deploy using Terraform
        run: |
          terraform init

          KV_ID=$(curl -sS "https://api.cloudflare.com/client/v4/accounts/$TF_VAR_CLOUDFLARE_ACCOUNT_ID/storage/kv/namespaces?per_page=100" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | \
            jq -r '.result[] | select(.title == "uptimeflare_kv") | .id')

          if [ -n "$KV_ID" ]; then
            echo "Importing existing resources..."
            terraform import cloudflare_workers_kv_namespace.uptimeflare_kv "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/$KV_ID"
            terraform import cloudflare_worker_script.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare_worker"
            terraform import cloudflare_pages_project.uptimeflare "$TF_VAR_CLOUDFLARE_ACCOUNT_ID/uptimeflare"
          else
            echo "KV namespace not found, skipping import (first deployment)."
          fi

          echo "Skipping import of cloudflare_worker_cron_trigger; Terraform will create it if needed."

          terraform apply -auto-approve -input=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      # Add durable object bindings back post-Terraform
      - name: Add durable object bindings
        run: |
          CURRENT_BINDINGS=$(curl -sS -X GET \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq '.result.bindings' -c)

          echo "Re-adding durable object binding: REMOTE_CHECKER_DO"

          curl -sS -X PATCH \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -F "settings={\"bindings\":[{\"type\":\"durable_object_namespace\",\"name\":\"REMOTE_CHECKER_DO\",\"class_name\":\"RemoteChecker\"},${CURRENT_BINDINGS:1:-1}]}"
          
          curl -sS -X PATCH \
            --url "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/scripts/uptimeflare_worker/script-settings" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"observability":{"enabled":true}}'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}

      - name: Upload pages using Wrangler
        run: |
          npx wrangler pages deploy .vercel/output/static --project-name uptimeflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ steps.fetch_account_id.outputs.account_id }}
